#!/usr/bin/env python3
# enjinuity
# Written in 2016 by David H. Wei <https://github.com/spikeh/>
# and Italo Cotta <https://github.com/itcotta/>
#
# To the extent possible under law, the author(s) have dedicated all
# copyright and related and neighboring rights to this software to the
# public domain worldwide. This software is distributed without any
# warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication
# along with this software. If not, see
# <http://creativecommons.org/publicdomain/zero/1.0/>.
import argparse
import pickle

desc = 'Insert a dump file from enjinuity into a database.'
parser = argparse.ArgumentParser(description=desc)
parser.add_argument('dbfile', metavar='DBFILE')
parser.add_argument('-t', choices=['pgsql', 'mysql'],
                    required=True, help='database type', dest='dbtype')
parser.add_argument('-a', default='localhost', help='database host address',
                    dest='hostname')
parser.add_argument('-u', required=True, help='database username',
                    dest='username')
parser.add_argument('-p', required=True, help='database password',
                    dest='password')
parser.add_argument('-n', required=True, help='database name', dest='dbname')
parser.add_argument('-f', help='database table prefix', dest='tbl_prefix',
                    default='')
args = parser.parse_args()

if args.dbtype == 'pgsql':
    import psycopg2
    conn = psycopg2.connect(host=args.hostname, user=args.username,
                            password=args.password, database=args.dbname)
elif args.dbtype == 'mysql':
    import pymysql
    conn = pymysql.connect(host=args.hostname, user=args.username,
                           password=args.password, database=args.dbname,
                           charset='utf8')

cur = conn.cursor()
db = pickle.load(open(args.dbfile, 'rb'))
for table, rows in db.items():
    if len(rows) == 0:
        continue
    query_head = 'INSERT INTO {}{} VALUES ('.format(args.tbl_prefix, table)
    query_body = ''.join(['%s, ' for _ in range(len(rows[0]) - 1)])
    query_tail = '%s);'
    query = query_head + query_body + query_tail
    for row in rows:
        cur.execute(query, row)
conn.commit()

# Update autoincremented columns
if args.dbtype == 'pgsql':
    cur.execute('SELECT sequence_name FROM information_schema.sequences;')
    query_max = 'SELECT MAX({}) FROM {};'
    query_as = 'ALTER SEQUENCE {} RESTART WITH {:d};'
    cur2 = conn.cursor()
    for seq in cur:
        seq = seq[0]
        seqlst = seq.split('_')
        if seqlst[0] == 'phpbb':
            table = seq[:seq.rfind('_')]
            pkey_cur = conn.cursor()
            pkey_cur.execute(
                    ('SELECT a.attname, format_type(a.atttypid, a.atttypmod) '
                     'AS data_type FROM pg_index i JOIN pg_attribute a ON '
                     'a.attrelid = i.indrelid AND a.attnum = ANY(i.indkey) '
                     'WHERE  i.indrelid = \'{}\'::regclass AND '
                     'i.indisprimary;').format(table))
            pkey = pkey_cur.fetchone()[0]
        else:
            table = seqlst[0] if len(seqlst) == 3 else seqlst[0] + seqlst[1]
            pkey = seqlst[-2]
        cur2.execute(query_max.format(pkey, table))
        max_pkey = cur2.fetchone()[0]
        if max_pkey:
            cur2.execute(query_as.format(seq, max_pkey + 1))
    conn.commit()
    cur2.close()

cur.close()
conn.close()
